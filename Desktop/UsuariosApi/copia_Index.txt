'use strict'

const express = require('express')
const bodyParser = require ('body-parser')  //permite parsear el cuerpo del mensaje y tratarlo como un objeto tipo json
const mongoose = require ('mongoose')
const Product = require ('./models/product')

const app = express ()
const port = process.env.PORT || 3001


app.use(bodyParser.urlencoded({extended: false}))
app.use(bodyParser.json())   //al definir esta línea, ya podemos usar la extención req.body
                            //el .json nos permite leer los datos en archivo .json

app.get ('/api/product', (req, res) => {  // Ruta get para mostrar todos los productos ***parametro res= respuesta del backend  req= requerimiento del usuario
    Product.find({}, (err,products) =>{    // Buscar todos los productos {}
        if (err) return res.status(500).send({message:`Error al realizar la petición: ${err}`})
        if (!products) return res.status(404).send({message:`El producto no existe ${err}`})

        res.send(200, {products})  //200 = código  de estado correcto;  {products:[]} es un array vacío tipo Json
                                     // {products} = sintaxis cuando la variable a definir es igual a la clave a definir {products:produts}
    })

})

app.get ('/api/product/:productId', (req, res) => {  // para acceder a un único recurso
    let productId = req.params.productId  //se guarda en una varia productID  params=parametro de la url

    Product.findById (productId, (err,product) => {   //variable producto que busque=findById
        if (err) return res.status(500).send({message:`Error al realizar la petición: ${err}`})
        if (!product) return res.status(404).send({message:`El producto no existe ${err}`}) //si el producto no existe (!product)

        res.status(200).send({product})
    })     

})

app.post ('/api/product', (req, res) => {   // ruta post=para poder subir nuevos productos  
    console.log('POST /api/product')       //produc es el produc.js creado
    console.log(req.body) //ver todo lo que se mande en el cuerpo de la petición

    let product = new Product ()   //variable product, se añaden los campos que se asiganaron en el archivo produc.js que es el modelo para crear la base de datos
    product.name = req.body.name    //poner misma clave ejm. name  dela petición tipo post
    product.picture = req.body.picture 
    product.price = req.body.price
    product.category = req.body.category
    product.description = req.body.description

    product.save ((err, productStored) => {   // product.save = guardar el producto en la base de datos **Parametros a enviar al usuario: err=por si ocurre un error y el producStore= es producto guardado
        if (err) res.status(500).send ({message: `Error al salvar la base de datos: ${err}`}) //mensaje si se produce un error

        res.status(200).send ({product:productStored})
    })

})


app.put ('/api/product/:productId', (req, res) => {   // ruta put=para las actualizaciones 
    let productId = req.params.productId
    let update = req.body

    Product.findByIdAndUpdate (productId, update, (err, productUpdated) => {
        if (err) res.status(500).send ({message: `Error al actualizar el producto: ${err}`})

        res.status(200).send ({product:productUpdated})
    } )
})

app.delete ('/api/product/:productId', (req, res) => {  //Ruta delete = para eliminar producto de la base de datos
    let productId = req.params.productId  //acceder a todos los id de los productos

    Product.findById (productId, (err, product) => {    // findById () se usa para buscar un solo documento por su campo _id
        if (err) res.status (500).send({message: `Error al borrar el producto: ${err}`})
        
        product.remove(err => {
            if (err) res.status (500).send({message: `Error al borrar el producto: ${err}`})
            res.status(200).send({message: `El producto ha sido eliminado` })
        })
    })   
})

mongoose.connect ('mongodb://localhost:27017/shop', (err,res) => {  // Conexion a la base de datos shop= nombre de la BD que se va a  generar automatica/te
    if (err) {
        return console.log (`Error al conectar a la base de datos: ${err}` )
    }
    
    console.log('Conexión a la base de datos establecida....')

    app.listen(port, () => {
        console.log(`API REST corriendo en http://localhost:${port}`)
    })

})

